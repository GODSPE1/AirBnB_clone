#file_storage.py file

#!/usr/bin/python3
"""
Thie module contains FileStorage class
"""
import json


class FileStorage:
    """
    This class is responsible for serializing instances to a JSON fil
    and deserializing JSON files back into instances.
    """

    __file_path = "file.json"
    __objects = {}

    @property
    def file_path(self):
        return self.__file_path

    @property
    def objects(self):
        return self.__objects

    def all(self):
        """
        returns the dictionary __objects
        """
        return self.__objects

    def new(self, obj):
        """
        sets in __objects the obj with key <obj class name>.id
        """
        key = "{}.{}".format(obj.__class__.__name__, obj.id)
        self.__objects[key] = obj

    def save(self):
        """
        serializes __objects to the JSON file (path: __file_path)
        """
        object_serialised = {}
        for key, value in self.__objects.items():
            object_serialised[key] = value.to_dict()
        with open(self.__file_path, "w") as file:
            json.dump(object_serialised, file)

    def reload(self):
        """
        deserializes the JSON file to __objects
        (only if the JSON file (__file_path) exists;
        otherwise, do nothing
        """
        import os

        if os.path.exists(self.__file_path):
            with open(self.__file_path, "r") as file:
                self.__objects = json.load(file)


#base_model.py file


#!/usr/bin/python3
"""
This module represents a BaseModel class.
it defines all common attributes/methods for other classes
"""
from models.__init__ import storage
from datetime import datetime
import uuid


class BaseModel:
    """
    Base class for other classes.

    Attributes:
        id: a string autogenerated by uuid module
        created_at: time in which the instance is created
        updated_at: updates with current time everytime the object changes

    Methods:
        __init__(): instantiates a class
        __str__(): prints the string representation of the class instance
        save(): updates the public instance attribute 'updated_at'
        to_dict(): returns a dictionary containing\
        all the keys/values of the instance
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor method
        """
        if kwargs:
            for key, value in kwargs.items():
                if key != "__class__":
                    if key == "created_at":
                        setattr(self, key, datetime.fromisoformat(value))
                    elif key == "updated_at":
                        setattr(self, key, datetime.fromisoformat(value))
                    else:
                        setattr(self, key, value)
        else:
            self.id = str(uuid.uuid4())
            self.created_at = datetime.now()
            self.updated_at = datetime.now()
            storage.new(self)

    def __str__(self):
        """
        prints the string representation of the instance
        """
        my_str = f"[BaseModel] ({self.id}) {self.__dict__}"

        return my_str

    def save(self):
        """
        updates 'updated_at' with the current datetime
        """
        self.updated_at = datetime.now()
        storage.save()

    def to_dict(self):
        """
        Converts the BaseModel instance to a dictionary
        """
        my_dict = self.__dict__.copy()

        for key, value in my_dict.items():
            if isinstance(value, datetime):
                my_dict[key] = value.isoformat()
            elif isinstance(value, BaseModel):
                my_dict[key] = value.to_dict()

        my_dict['__class__'] = self.__class__.__name__

        return my_dict



#__init__.py file
from models.engine.file_storage import FileStorage

storage = FileStorage()

storage.reload()
